import BreeClass from 'bree';
import FastifyPlugin from 'fastify-plugin';
import * as fs from 'fs';
import { BreeTS } from './plugin.js';
function isTSNode(options) {
    var _a;
    return (_a = options === null || options === void 0 ? void 0 : options.ts) !== null && _a !== void 0 ? _a : !!process[Symbol.for('ts-node.register.instance')];
}
const plugin = async function (fastify, options) {
    const opt = Object.assign({ customOptions: {}, autoStart: true, autoClose: true }, options);
    const { customOptions, autoStart, autoClose } = opt;
    if (typeof customOptions.root === 'string') {
        await fs.promises.mkdir(customOptions.root, { recursive: true });
    }
    const defaultOption = {
        root: false,
        silenceRootCheckError: true,
        jobs: []
    };
    const o = { ...defaultOption, ...customOptions };
    if (typeof o.logger !== 'object') {
        o.logger = fastify.log.child({ plugin: 'fastify-bree' });
    }
    if (isTSNode())
        BreeClass.extend(BreeTS);
    const bree = new BreeClass(o);
    fastify.decorate('bree', bree);
    if (autoStart) {
        fastify.addHook('onReady', async function () { await bree.start(); });
    }
    if (autoClose) {
        fastify.addHook('onClose', async function () { await bree.stop(); });
    }
};
export const FastifyBree = FastifyPlugin(plugin, {
    fastify: '4.x',
    name: 'fastify-bree',
    dependencies: []
});
export default FastifyBree;
//# sourceMappingURL=index.js.map