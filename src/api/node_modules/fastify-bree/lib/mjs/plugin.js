import { Worker } from 'worker_threads';
export const BreeTS = function (options, Bree) {
    options = options !== null && options !== void 0 ? options : {};
    const oldInit = Bree.prototype.init;
    Bree.prototype.init = async function () {
        if (!this.config.acceptedExtensions.includes('.ts')) {
            this.config.acceptedExtensions.push('.ts');
        }
        if (this.config.defaultExtension === 'js') {
            this.config.defaultExtension = 'ts';
        }
        return oldInit.bind(this)();
    };
    const oldCreateWorker = Bree.prototype.createWorker;
    Bree.prototype.createWorker = function (filename, options) {
        if (filename.endsWith('.ts')) {
            options.eval = true;
            options.workerData.__filename = filename;
            options.workerData.__tsNodeOptions = options.workerData.job.tsNodeOptions;
            return new Worker(`
const workerData = require('worker_threads').workerData
require('ts-node').register(workerData.__tsNodeOptions)
require(workerData.__filename)
      `, options);
        }
        return oldCreateWorker(filename, options);
    };
};
//# sourceMappingURL=plugin.js.map