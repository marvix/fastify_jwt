!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
200	test/commonjs/basic/encapsulate/plugin2.js	/^        200: {$/;"	P
AutoloadPluginOptions	fastify-autoload.d.ts	/^export interface AutoloadPluginOptions {$/;"	i
RewritePrefix	fastify-autoload.d.ts	/^type RewritePrefix = (folderParent: string, folderName: string) => string | boolean$/;"	t
allowJs	scripts/unit-typescript-esm.js	/^        allowJs: false,$/;"	P
args	scripts/unit-typescript-esm.js	/^  const args = [$/;"	A
args	scripts/unit-typescript-swc.js	/^  const args = [$/;"	A
args	scripts/unit-typescript-tsm.js	/^  const args = [$/;"	A
autoConfig	test/commonjs/options/plugins-3/plugin-y.js	/^plugin.autoConfig = { name: 'y' }$/;"	P
autoConfig	test/module/options/plugins-3/plugin-y.js	/^export const autoConfig = { name: 'y' }$/;"	E
autoHooks	index.js	/^    const autoHooks = list.find((dirent) => autoHooksPattern.test(dirent.name))$/;"	F
autoHooks	test/commonjs/autohooks/basic.js	/^    autoHooks: true$/;"	P
autoHooks	test/commonjs/autohooks/cascade.js	/^    autoHooks: true,$/;"	P
autoHooks	test/commonjs/autohooks/overwrite.js	/^    autoHooks: true,$/;"	P
autoHooksPattern	index.js	/^  autoHooksPattern: \/^[_.]?auto_?hooks(\\.ts|\\.js|\\.cjs|\\.mjs)$\/i,$/;"	P
autoPrefix	test/module/basic/defaultPrefix/overridePrefix.js	/^export const autoPrefix = '\/notUsed'$/;"	E
autoPrefix	test/module/basic/defaultPrefix/prefixed.js	/^export const autoPrefix = '\/prefixed'$/;"	E
autoPrefix	test/module/basic/foo/manualprefix/index.js	/^export const autoPrefix = '\/semiautomatic'$/;"	E
autoPrefix	test/module/basic/foo/prefixed.js	/^export const autoPrefix = '\/prefixed'$/;"	E
autoload	test/module/basic/foo/skipAutoload.js	/^export const autoload = false$/;"	E
autoload	test/module/index-package/app.js	/^export const autoload = false$/;"	E
autoload	test/module/index-package/index.js	/^export const autoload = false$/;"	E
cascadeHooks	test/commonjs/autohooks/cascade.js	/^    cascadeHooks: true$/;"	P
cascadeHooks	test/commonjs/autohooks/overwrite.js	/^    cascadeHooks: true,$/;"	P
commonjsPattern	index.js	/^const commonjsPattern = \/\\.cjs$\/i$/;"	V
composedPlugin	index.js	/^      const composedPlugin = async function (app) {$/;"	F
currentHooks	index.js	/^  let currentHooks = []$/;"	A
deepPlugin	test/commonjs/deep/routes/level-1/level-2/routes.js	/^function deepPlugin (f, opts, next) {$/;"	F
default	test/commonjs/basic/foo/exports-default.js	/^module.exports.default = function (f, opts, next) {$/;"	M
defaults	index.js	/^const defaults = {$/;"	O
dependencies	test/commonjs/cyclic-dependency/lib/a.js	/^  dependencies: ['plugin-b'],$/;"	P
dependencies	test/commonjs/cyclic-dependency/lib/b.js	/^  dependencies: ['plugin-a'],$/;"	P
dependencies	test/commonjs/graph-dependency/lib/a.js	/^  dependencies: ['plugin-b', 'plugin-c'],$/;"	P
dependencies	test/commonjs/graph-dependency/lib/b.js	/^  dependencies: ['plugin-d'],$/;"	P
dependencies	test/commonjs/graph-dependency/lib/c.js	/^  dependencies: ['plugin-d'],$/;"	P
dir	test/commonjs/basic/app.js	/^      dir: skipDir$/;"	P
dir	test/commonjs/index-package/app.js	/^    dir: __dirname$/;"	P
dir	test/module/basic/app.js	/^      dir: skipDir$/;"	P
dirNameRoutePrefix	index.js	/^  dirNameRoutePrefix: true,$/;"	P
dirNameRoutePrefix	test/commonjs/deep/app.js	/^    dirNameRoutePrefix: false,$/;"	P
dirNameRoutePrefix	test/module/basic/app.js	/^    dirNameRoutePrefix: false,$/;"	P
directoryPromises	index.js	/^  const directoryPromises = []$/;"	A
encapsulate	index.js	/^  encapsulate: true$/;"	P
encapsulate	test/commonjs/basic/app.js	/^    encapsulate: false$/;"	P
enrichError	index.js	/^function enrichError (err) {$/;"	F
env	scripts/unit-typescript-esm.js	/^    env: {$/;"	P
esModuleInterop	scripts/unit-typescript-esm.js	/^        esModuleInterop: true$/;"	P
exports	test/commonjs/autohooks/basic.js	/^module.exports = function (fastify, opts, next) {$/;"	M
exports	test/commonjs/autohooks/cascade.js	/^module.exports = function (fastify, opts, next) {$/;"	M
exports	test/commonjs/autohooks/disabled.js	/^module.exports = function (fastify, opts, next) {$/;"	M
exports	test/commonjs/autohooks/overwrite.js	/^module.exports = function (fastify, opts, next) {$/;"	M
exports	test/commonjs/basic/app.js	/^module.exports = function (fastify, opts, next) {$/;"	M
exports	test/commonjs/basic/defaultPrefix/defaultPrefix.js	/^module.exports = function (f, opts, next) {$/;"	M
exports	test/commonjs/basic/defaultPrefix/noDefaultPrefix.js	/^module.exports = function (f, opts, next) {$/;"	M
exports	test/commonjs/basic/defaultPrefix/overridePrefix.js	/^module.exports = function (f, opts, next) {$/;"	M
exports	test/commonjs/basic/defaultPrefix/prefixed.js	/^module.exports = function (f, opts, next) {$/;"	M
exports	test/commonjs/basic/encapsulate/plugin1.js	/^module.exports = (fastify, opts, done) => {$/;"	M
exports	test/commonjs/basic/foo/a/b/c/d.js	/^module.exports = function (app, opts, next) {$/;"	M
exports	test/commonjs/basic/foo/autoroute/get.js	/^module.exports = function (f, opts, next) {$/;"	M
exports	test/commonjs/basic/foo/autoroute/list.js	/^module.exports = function (f, opts, next) {$/;"	M
exports	test/commonjs/basic/foo/autowrap/get.js	/^module.exports = {$/;"	P
exports	test/commonjs/basic/foo/autowrap/list.js	/^module.exports = {$/;"	P
exports	test/commonjs/basic/foo/bar/index.js	/^module.exports = function (f, opts, next) {$/;"	M
exports	test/commonjs/basic/foo/bar/is-not-loaded.js	/^module.exports = function (app, opts, next) {$/;"	M
exports	test/commonjs/basic/foo/decorator.js	/^module.exports = function (f, opts, next) {$/;"	M
exports	test/commonjs/basic/foo/manualprefix/get.js	/^module.exports = function (f, opts, next) {$/;"	M
exports	test/commonjs/basic/foo/manualprefix/index.js	/^module.exports = function (fastify, opts, next) {$/;"	M
exports	test/commonjs/basic/foo/manualprefix/list.js	/^module.exports = function (f, opts, next) {$/;"	M
exports	test/commonjs/basic/foo/options.js	/^module.exports = function (f, opts, next) {$/;"	M
exports	test/commonjs/basic/foo/prefixed.js	/^module.exports = function (f, opts, next) {$/;"	M
exports	test/commonjs/basic/foo/skipAutoload.js	/^module.exports = function (f, opts, next) {$/;"	M
exports	test/commonjs/basic/foo/something.js	/^module.exports = function (f, opts, next) {$/;"	M
exports	test/commonjs/cyclic-dependency/app.js	/^module.exports = function (fastify, opts, next) {$/;"	M
exports	test/commonjs/deep/app.js	/^module.exports = function (fastify, opts, next) {$/;"	M
exports	test/commonjs/dependency/app.js	/^module.exports = function (fastify, opts, next) {$/;"	M
exports	test/commonjs/graph-dependency/app.js	/^module.exports = function (fastify, opts, next) {$/;"	M
exports	test/commonjs/index-error/app.js	/^module.exports = function (fastify, opts, next) {$/;"	M
exports	test/commonjs/index-error/package/answer.js	/^module.exports = function (f, opts, next) {$/;"	M
exports	test/commonjs/index-package/app.js	/^module.exports = function (fastify, opts, next) {$/;"	M
exports	test/commonjs/index-package/foo/bar.js	/^module.exports = function (f, opts, next) {$/;"	M
exports	test/commonjs/module-error/app.js	/^module.exports = function (fastify, opts, next) {$/;"	M
exports	test/commonjs/options/app.js	/^module.exports = function (fastify, opts, next) {$/;"	M
exports	test/commonjs/route-parameters/basic.js	/^module.exports = function (fastify, opts, next) {$/;"	M
exports	test/commonjs/route-parameters/disabled.js	/^module.exports = function (fastify, opts, next) {$/;"	M
exports	test/commonjs/syntax-error/app.js	/^module.exports = function (fastify, opts, next) {$/;"	M
exports	test/commonjs/syntax-error/lib/a.js	/^module.exports = function (app, opts, next) {$/;"	M
exports	test/commonjs/ts-error/app.js	/^module.exports = function (fastify, opts, next) {$/;"	M
exports	test/typescript/basic/foo/javascript.js	/^module.exports = function (fastify, opts, next) {$/;"	M
fastifyAutoload	index.js	/^const fastifyAutoload = async function autoload (fastify, options) {$/;"	F
fastifyAutoloadNamed	test/module/esm-import/app-named.js	/^import { fastifyAutoload as fastifyAutoloadNamed } from '..\/..\/..\/index.js'$/;"	I
fastifyAutoloadStar	test/module/esm-import/app-star-default.js	/^import * as fastifyAutoloadStar from '..\/..\/..\/index.js'$/;"	I
fastifyAutoloadStar	test/module/esm-import/app-star-named.js	/^import * as fastifyAutoloadStar from '..\/..\/..\/index.js'$/;"	I
filename	index.js	/^    filename: file,$/;"	P
findPlugins	index.js	/^async function findPlugins (dir, options, hookedAccumulator = {}, prefix, depth = 0, hooks = []) {$/;"	F
getPackageType	index.js	/^async function getPackageType (cwd) {$/;"	F
getScriptType	index.js	/^function getScriptType (fname, packageType) {$/;"	F
handler	test/commonjs/basic/foo/autowrap/get.js	/^  handler: (request, reply) => {$/;"	M
handler	test/commonjs/basic/foo/autowrap/list.js	/^  handler: (request, reply) => {$/;"	M
handler	test/module/basic/foo/autowrap/get.js	/^  handler: (request, reply) => {$/;"	M
handler	test/module/basic/foo/autowrap/list.js	/^  handler: (request, reply) => {$/;"	M
hasDirectory	index.js	/^    const hasDirectory = list.find((dirent) => dirent.isDirectory())$/;"	F
hookArray	index.js	/^  const hookArray = [].concat.apply([], Object.values(pluginTree).map(o => o.hooks))$/;"	A
hookArray	index.js	/^  const hookArray = [].concat.apply([], Object.values(pluginTree).map(o => o.hooks))$/;"	F
hooksMeta	index.js	/^  const hooksMeta = {}$/;"	O
ignorePattern	test/commonjs/basic/app.js	/^    ignorePattern: \/^ignored\/$/;"	P
ignorePattern	test/commonjs/basic/app.js	/^    ignorePattern: \/^index\/$/;"	P
ignorePattern	test/module/basic/app.js	/^    ignorePattern: \/^ignored\/$/;"	P
indexDirent	index.js	/^  const indexDirent = list.find((dirent) => indexPattern.test(dirent.name))$/;"	F
indexPattern	index.js	/^  indexPattern: \/^index(\\.ts|\\.js|\\.cjs|\\.mjs)$\/i,$/;"	P
indexPattern	test/commonjs/basic/app.js	/^    indexPattern: \/.custom\\.js$\/,$/;"	P
loadHook	index.js	/^async function loadHook (hook, options) {$/;"	F
loadPlugin	index.js	/^async function loadPlugin (file, type, directoryPrefix, options) {$/;"	F
maxDepth	test/module/basic/app.js	/^    maxDepth: 2,$/;"	P
modulePattern	index.js	/^const modulePattern = \/\\.mjs$\/i$/;"	V
options	index.js	/^    options: pluginOptions,$/;"	P
options	test/commonjs/basic/app.js	/^    options: { foo: 'bar' },$/;"	P
options	test/commonjs/basic/app.js	/^    options: { prefix: '\/custom-index' },$/;"	P
options	test/commonjs/basic/app.js	/^    options: { prefix: '\/defaultPrefix' }$/;"	P
options	test/commonjs/basic/app.js	/^    options: { prefix: '\/rewrite-route-prefix' },$/;"	P
options	test/commonjs/basic/app.js	/^    options: { prefix: 'index\/' }$/;"	P
options	test/commonjs/basic/app.js	/^    options: { prefix: 'one\/' }$/;"	P
options	test/commonjs/basic/app.js	/^    options: { prefix: 'routeParams\/' },$/;"	P
options	test/commonjs/deep/app.js	/^    options: {$/;"	P
options	test/commonjs/options/app.js	/^    options: {$/;"	P
options	test/module/basic/app.js	/^    options: { foo: 'bar' },$/;"	P
options	test/module/basic/app.js	/^    options: { prefix: '\/defaultPrefix' }$/;"	P
options	test/module/basic/app.js	/^    options: { prefix: 'nested\/' }$/;"	P
options	test/module/basic/app.js	/^    options: { prefix: 'one\/' }$/;"	P
options	test/module/basic/app.js	/^    options: { prefix: 'ten\/' }$/;"	P
options	test/module/esm-import/app-default.js	/^    options: { foo: 'bar' }$/;"	P
options	test/module/esm-import/app-named.js	/^    options: { foo: 'bar' }$/;"	P
options	test/module/esm-import/app-star-default.js	/^    options: { foo: 'bar' }$/;"	P
options	test/module/esm-import/app-star-named.js	/^    options: { foo: 'bar' }$/;"	P
options	test/module/options/app.js	/^    options: {$/;"	P
opts	index.js	/^  const opts = { ...defaults, packageType, ...options }$/;"	O
overwriteHooks	test/commonjs/autohooks/overwrite.js	/^    overwriteHooks: true$/;"	P
packageDirent	index.js	/^  const packageDirent = list.find((dirent) => dirent.name === 'package.json')$/;"	F
plugin	index.js	/^      const plugin = metas.find((i) => i.filename === pluginFile.file)$/;"	F
plugin	test/commonjs/options/lib-plugin.js	/^function plugin (f, opts, next) {$/;"	F
plugin	test/module/options/lib-plugin.js	/^function plugin (f, opts, next) {$/;"	F
pluginArray	index.js	/^  const pluginArray = [].concat.apply([], Object.values(pluginTree).map(o => o.plugins))$/;"	A
pluginArray	index.js	/^  const pluginArray = [].concat.apply([], Object.values(pluginTree).map(o => o.plugins))$/;"	F
pluginsMeta	index.js	/^  const pluginsMeta = {}$/;"	O
prefix	index.js	/^    pluginOptions.prefix = (pluginOptions.prefix || '') + prefix.replace(\/\\\/+\/g, '\/')$/;"	M
prefix	index.js	/^  pluginOptions.prefix = (pluginOptions.prefix && pluginOptions.prefix.endsWith('\/')) ? pluginOptions.prefix.slice(0, -1) : pluginOptions.prefix$/;"	M
prefixOverride	test/module/basic/defaultPrefix/noDefaultPrefix.js	/^export const prefixOverride = ''$/;"	E
prefixOverride	test/module/basic/defaultPrefix/overridePrefix.js	/^export const prefixOverride = '\/overriddenPrefix'$/;"	E
properties	test/commonjs/basic/encapsulate/plugin2.js	/^          properties: {$/;"	P
registerAllPlugins	index.js	/^  function registerAllPlugins (app, pluginFiles) {$/;"	F
registerPlugin	index.js	/^function registerPlugin (fastify, meta, allPlugins, parentPlugins = {}) {$/;"	F
registered	index.js	/^    registered: false$/;"	P
replaceRouteParamPattern	index.js	/^  function replaceRouteParamPattern (pattern) {$/;"	F
response	test/commonjs/basic/encapsulate/plugin2.js	/^      response: {$/;"	P
routeMixedParamPattern	index.js	/^const routeMixedParamPattern = \/__\/g$/;"	V
routeParamPattern	index.js	/^const routeParamPattern = \/\\\/_\/ig$/;"	V
routeParams	test/commonjs/basic/app.js	/^    routeParams: true$/;"	P
routeParams	test/commonjs/route-parameters/basic.js	/^    routeParams: true$/;"	P
routeParams	test/commonjs/route-parameters/disabled.js	/^    routeParams: false$/;"	P
schema	test/commonjs/basic/encapsulate/plugin2.js	/^    schema: {$/;"	P
scriptPattern	index.js	/^  scriptPattern: \/((^.?|\\.[^d]|[^.]d|[^.][^d])\\.ts|\\.js|\\.cjs|\\.mjs)$\/i,$/;"	P
shell	scripts/unit-typescript-esm.js	/^    shell: true,$/;"	P
shell	scripts/unit-typescript-swc.js	/^    shell: true$/;"	P
shell	scripts/unit-typescript-tsm.js	/^    shell: true$/;"	P
statusCode	test/module/basic.js	/^      statusCode: 404$/;"	P
typescriptPattern	index.js	/^const typescriptPattern = \/\\.ts$\/i$/;"	V
works	test/commonjs/basic/encapsulate/plugin2.js	/^            works: { type: 'boolean' }$/;"	P
wrapRoutes	index.js	/^function wrapRoutes (content) {$/;"	F
